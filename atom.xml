<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[nickf on code]]></title>
  <link href="http://spadgos.github.com/atom.xml" rel="self"/>
  <link href="http://spadgos.github.com/"/>
  <updated>2013-02-15T11:55:23+01:00</updated>
  <id>http://spadgos.github.com/</id>
  <author>
    <name><![CDATA[Nick Fisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SoundCloud's Stack: Slides from FluentConf and SFJS]]></title>
    <link href="http://spadgos.github.com/blog/2012/06/01/soundclouds-stack-slides-from-fluentconf-and-sfjs/"/>
    <updated>2012-06-01T16:16:00+02:00</updated>
    <id>http://spadgos.github.com/blog/2012/06/01/soundclouds-stack-slides-from-fluentconf-and-sfjs</id>
    <content type="html"><![CDATA[<p>This week, I&#8217;ve been at the <a href="http://fluentconf.com/fluent2012">Fluent Conference</a> in San Francisco. It&#8217;s O&#8217;Reilly&#8217;s first javascript conference, and it brought in some really large names in the field including Steve Souders, Brendan Eich, Ward Cunningham, Paul Irish, Lea Verou&#8230; and me.</p>

<p>I was doing just a short presentation on the Share Your Stack line of talks, and so I was discussing what we&#8217;ve used and how we&#8217;ve built <a href="http://next.soundcloud.com">The Next SoundCloud</a>. I was also quite honoured to be contacted by Dave Nugent and Andrew de Andrade from the <a href="http://www.meetup.com/jsmeetup/">San Francisco JS Users&#8217; group</a> who asked me to give a talk there too. I don&#8217;t know why, but I was kind of expecting a medium-ish sized crowd, and that I&#8217;d be on for 20-30 minutes or so. Turns out there were over 300 people and my slot was for an hour. Cool (gulp).</p>

<p>Anyway, I think it went really well and I got to talk to a lot of really interesting developers doing some really cool stuff. Due to popular demand, I&#8217;m uploading the slides I used for the talk. First of all, I hope they work on your computer (interoperability wasn&#8217;t a key concern at the time), and that they make some sense. For my actual talk, I had embedded soundcloud.com into the presentation using iframes, but this won&#8217;t work for you unless you&#8217;re already in the beta, so I&#8217;ve replaced them with static images. You&#8217;ll just have to imagine all the awesomeness of it.</p>

<p>You can take a look at the slides here: <a href="http://spadgos.github.com/sfjs-next-soundcloud/">SoundCloud&#8217;s Stack</a>.</p>

<p><img src="http://spadgos.github.com/sfjs-next-soundcloud/logo.png" alt="" /></p>

<p>Coming shortly, I&#8217;ll be writing a blog post for <a href="http://backstage.soundcloud.com/">SoundCloud Backstage</a>, and probably write another post here with more in-depth details about some of the techniques I spoke about in the talks.</p>

<p>PS: Due to all the people I spoke to mocking my luddite ways, I finally caved and created a Twitter account: <a href="http://twitter.com/spadgos">@spadgos</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CitySonar]]></title>
    <link href="http://spadgos.github.com/blog/2012/03/25/citysonar/"/>
    <updated>2012-03-25T19:44:00+02:00</updated>
    <id>http://spadgos.github.com/blog/2012/03/25/citysonar</id>
    <content type="html"><![CDATA[<p>This weekend was the <a href="http://amsterdam.musichackday.org/2012/index.php?page=Main+page">Amsterdam</a> <a href="http://musichackday.org">Music Hack Day</a>, which I was lucky enough to go along to. Although the weather seemed way too nice to spend the entire weekend indoors staring at a keyboard, <a href="http://wiki.musichackday.org/index.php?title=Amsterdam_2012_Hacks">plenty of people</a> were just as silly as me. Some of the standouts were the Theremin-controlled autotuned karaoke machine, the Bunny Boogie (where a robotic rabbit can upload recordings to SoundCloud and then will dance along to the songs you play there) and a mashup which finds popular animated gifs which match the BPM of songs in your Spotify library and synchronise the two.</p>

<p>I worked with <a href="http://twitter.com/#!a_kovalev">Sasha</a> on building an experiment we called &#8221;<a href="http://citysonar.herokuapp.com/">CitySonar</a>&#8221;. The concept is simple, though perhaps hard to describe in words. Let&#8217;s try anyway:</p>

<ol>
<li>Choose a location on a map (we used Google Maps)</li>
<li>Choose a geographical feature, such as banks, schools or cafes.</li>
<li>A marker is placed on the screen for each of these features near you.</li>
<li>When you press play, a &#8216;sonar&#8217; sweeps around the map and plays a note for each of the markers.</li>
</ol>


<p>Markers further away are lower notes, ones closer are higher. Each different type of feature can have different characteristics for their notes, including the octave range, and the attack and release of the notes.</p>

<p><a href="http://citysonar.herokuapp.com/"><img src="https://github.com/spadgos/soundradar/raw/master/assets/screen1.png" alt="CitySonar screenshot" /></a></p>

<blockquote><p><strong>Warning full frontal nerdity:</strong> This is a client-side app, built entirely in Javascript. The only server-side component was a small NodeJS proxy to get around cross-origin security restrictions. The data was pulled from the <a href="http://wiki.openstreetmap.org/">OpenStreetMap</a> XAPI, custom map tiles provided by <a href="http://maps.stamen.com/">Stamen Maps</a>, and client-side audio generation was done by <a href="https://github.com/oampo/audiolet">Audiolet</a>.</p></blockquote>

<p>One great thing about the OpenStreetMap data is that it tracks heaps of geographic features, categorised quite granularly, so it&#8217;s not just &#8220;bars&#8221; and &#8220;cafes&#8221; nearby, but power poles, bicycle parking, post boxes, and even brothels. Mapping these features gave some really interesting insights and some interesting results for our experiment.</p>

<p>For example, in a large city like Amsterdam, searching for <em>restaurants</em> will end up with a cacophony, as these tend to be clustered quite tightly in neighbourhoods. <em>Post boxes</em>, however are evenly spaced thoughout the city and actually can create something resembling a melody. Using features which are clustered in a single place (for example, embassies or brothels) can be used for a loud <em>hit</em> in your soundscape.</p>

<p>The quality of the project is still firmly in the &#8220;hack&#8221; category &#8211; it did go from idea to completion in 24 hours, remember! &#8211; but it&#8217;s rather functional still, if you ignore some visual glitching&#8230; Also, OpenStreetMap is a community-built map and it&#8217;s definitely not complete yet: if you see features missing in your area, don&#8217;t forget you can go add them yourself!</p>

<p>You can check it out at <a href="http://citysonar.herokuapp.com/">http://citysonar.herokuapp.com</a>, and grab the code on <a href="https://github.com/spadgos/soundradar">GitHub</a>, but my god, the code is hacky. Please don&#8217;t look at it. <em>Also, the API we use is very slow sometimes, so you&#8217;ll just need to be patient sometimes.</em></p>

<h3>Bonus video</h3>

<p>Here is the recording from the presentations. CitySonar starts at 33:20.</p>

<iframe width="480" height="386" src="http://www.ustream.tv/embed/recorded/21353878" scrolling="no" frameborder="0" style="border: 0px none transparent;"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSSpecific plugin for SublimeText]]></title>
    <link href="http://spadgos.github.com/blog/2011/12/01/csspecific-plugin-for-sublimetext/"/>
    <updated>2011-12-01T16:43:00+01:00</updated>
    <id>http://spadgos.github.com/blog/2011/12/01/csspecific-plugin-for-sublimetext</id>
    <content type="html"><![CDATA[<p>A small post to announce a small plugin for <a href="http://www.sublimetext.com/">Sublime Text 2</a>. It&#8217;s called <a href="https://github.com/spadgos/sublime-csspecific"><strong>CSSpecific</strong></a> and simply, it calculates the specificity of your CSS selectors.</p>

<h2>Specificiwhat?</h2>

<p>When two CSS selectors target the same element, one of them has to win, right? Deciding which one is the winner is a matter of detecting which is the <em>most specific</em>. You can read the full technical details of this in the <a href="http://www.w3.org/TR/css3-selectors/#specificity">CSS Spec</a>, but basically it works like this:</p>

<p>A specificity score is 3 values. We&#8217;ll refer to these values as &#8220;a,b,c&#8221;.</p>

<blockquote><p>A selector&#8217;s specificity is calculated as follows:</p>

<ul>
<li>count the number of ID selectors in the selector (= a)</li>
<li>count the number of class selectors, attributes selectors, and pseudo-classes in the selector (= b)</li>
<li>count the number of type selectors and pseudo-elements in the selector (= c)</li>
<li>ignore the universal selector</li>
</ul>
</blockquote>

<p>At the end, whichever has the highest score wins, reading left to right, <code>a &gt; b &gt; c</code>. Note that any number of lower-valued selectors never outvalues a higher valued selector. So, even a selector which had 1000 classes in it would be less specific than one which had a single id. <code>(0, 1000, 0) &lt; (1, 0, 0)</code></p>

<h2>The plugin</h2>

<p>So the plugin, when activated, reads all the CSS selectors from your file (even in HTML files), and collates them in a display panel alongside their score. For simplicity the score is presented as a single number: <code>a * 100 + b * 10 + c</code>, which means that if you DO have a selector with 1000 classes, this plugin will tell you that it has a higher score, but you know what? If you have a selector with more than 10 classes or elements, you got bigger problems, pal.</p>

<h2>Examples</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* 001 */</span> <span class="nt">div</span>
</span><span class='line'><span class="c">/* 010 */</span> <span class="nc">.active</span>
</span><span class='line'><span class="c">/* 100 */</span> <span class="nf">#nav</span>
</span><span class='line'><span class="c">/* 101 */</span> <span class="nf">#nav</span> <span class="o">&gt;</span> <span class="nt">ol</span>
</span><span class='line'><span class="c">/* 012 */</span> <span class="nt">div</span> <span class="o">+</span> <span class="nt">a</span><span class="o">[</span><span class="nt">href</span><span class="o">]</span>
</span><span class='line'><span class="c">/* 002 */</span> <span class="nt">a</span><span class="nd">:active</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check it out on <a href="https://github.com/spadgos/sublime-csspecific">github</a>, let me know what you think, <a href="https://github.com/spadgos/sublime-csspecific/issues">send bug reports</a>, pull requests&#8230; all that &#8220;social coding&#8221; stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A SoundCloud plugin for Jekyll/Octopress]]></title>
    <link href="http://spadgos.github.com/blog/2011/11/30/a-soundcloud-plugin-for-jekyll-slash-octopress/"/>
    <updated>2011-11-30T23:22:00+01:00</updated>
    <id>http://spadgos.github.com/blog/2011/11/30/a-soundcloud-plugin-for-jekyll-slash-octopress</id>
    <content type="html"><![CDATA[<p>A little while ago, I started working at <a href="http://www.soundcloud.com/">SoundCloud</a> &#8211; it&#8217;s a really fun place to work, and very exciting given the scale and growth of the platform there. They&#8217;re so nice, they even put up an <a href="http://blog.soundcloud.com/2011/11/10/nick/">interview with me</a>!</p>

<p>I&#8217;m working across the HTML5 projects which SoundCloud are producing, including the mobile site and the widget. The widget is the player which users can embed into their websites or blogs, and just recently we&#8217;ve released the new version which is entirely based on HTML5. <em>I should mention that <strong>very</strong> little of the code was produced by me, since it was done before I started, but now I&#8217;m working on bugfixes and further improvements.</em></p>

<p>Anyway, the key point here is that it&#8217;s designed to be embedded on blogs. It&#8217;s not very difficult to get the code to embed it normally &#8211; just go to any track or user or anything, and click on &#8220;share&#8221; &#8211; but since I&#8217;m now on a new blogging engine which is specifically marketed as a &#8220;hacker&#8217;s&#8221; blog, I thought I&#8217;d put together a little plugin to make it even easier for those people using <a href="http://jekyllrb.com/">Jekyll</a> or <a href="http://octopress.org/">Octopress</a>.</p>

<p>It&#8217;s actually trivially simple in the end, but the <a href="https://github.com/spadgos/spadgos.github.com/blob/source/plugins/soundcloud.rb">source is on github</a>. It&#8217;s currently buried within my blog&#8217;s repo, but maybe soon I&#8217;ll move it to its own repository.</p>

<p>Using it is very simple too. The only downside currenly is that it requires you to know the relevant id if you want to embed a group, playlist, track or app widget. This information can be copied from the HTML which the SoundCloud site gives you, but it&#8217;s not immediately obvious. Perhaps I&#8217;ll see what we can do about that&#8230; The good news is that if you want a widget for a user&#8217;s tracks, or <em>their</em> favorite tracks, then you can just use their username in lieu of an id.</p>

<h2>Examples</h2>

<p>Here&#8217;s the most basic usage: a resource type (<code>users</code>, <code>favorites</code>, <code>groups</code>, <code>playlists</code>, <code>apps</code>, or <code>tracks</code>), and an id.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% soundcloud favorites 6431392 %}</span></code></pre></td></tr></table></div></figure>




<iframe width="100%" height="450" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Fusers%2F6431392%2Ffavorites&amp;"></iframe>


<p>There are more options, as described in the <a href="http://developers.soundcloud.com/docs/widget">widget documentation</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% soundcloud groups 438 color=282828 show_artwork=true %}</span></code></pre></td></tr></table></div></figure>




<iframe width="100%" height="450" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Fgroups%2F438&amp;color=282828&amp;show_artwork=true"></iframe>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% soundcloud playlists 162602 show_comments=false show_playcount=false show_user=false show_artwork=false %}</span></code></pre></td></tr></table></div></figure>




<iframe width="100%" height="450" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F162602&amp;show_comments=false&amp;show_playcount=false&amp;show_user=false&amp;show_artwork=false"></iframe>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% soundcloud tracks 26654081 %}</span></code></pre></td></tr></table></div></figure>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F26654081&amp;"></iframe>


<p>So there you have it. I&#8217;ll write more soon about the sidebar plugin, and perhaps I may have organised my code better by then and you&#8217;ll be able to get these plugins for yourself. Who knows??</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A new beginning]]></title>
    <link href="http://spadgos.github.com/blog/2011/11/20/a-new-beginning/"/>
    <updated>2011-11-20T14:01:00+01:00</updated>
    <id>http://spadgos.github.com/blog/2011/11/20/a-new-beginning</id>
    <content type="html"><![CDATA[<p>Yep, it&#8217;s a new blog! Hooray!</p>

<p>The last blog was, to be kind, <em>crap</em>. It was something I&#8217;d just thrown together to get it working. I chose a standard off-the-shelf wordpress theme, and that was about the limit of the effort I spent getting it set up. For someone who writes about the web, it was an embarassment, really.</p>

<p>Anyway, <strong>that was the past</strong>!</p>

<p>I&#8217;ve now set up with a new blogging engine, <a href="http://octopress.org/">Octopress</a>, which is built on top of <a href="http://jekyllrb.com/">Jekyll</a>. It&#8217;s described as a &#8220;hacker&#8217;s&#8221; blog &#8211; you write the content in a language such as markdown or textile, and then Octopress parses and converts it into static HTML pages. From there, you publish via <code>rsync</code> or, what I&#8217;m doing now, pushing to a github repository. Deployment via version control seems so very right, you know?</p>

<p>Despite my comments about the stock-standardness of my previous blog, the current one is still using the default packaged theme, but I&#8217;ll get onto that shortly, I swear. I&#8217;ll also look into migrating (and perhaps vetting) the posts from the old blog too.</p>

<p>Exciting times for a nerd.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text &amp; JSDocs]]></title>
    <link href="http://spadgos.github.com/blog/2011/11/01/sublime-text-and-jsdocs/"/>
    <updated>2011-11-01T23:37:00+01:00</updated>
    <id>http://spadgos.github.com/blog/2011/11/01/sublime-text-and-jsdocs</id>
    <content type="html"><![CDATA[<p>Recently, I’ve had one of those events in my professional life. They happen (for me) even less frequently than changing jobs. Yes, I have changed my preferred text editor. gasp!</p>

<p>I’ve moved from <a href="http://www.activestate.com/komodo-edit">Komodo</a>, which is a very competent and extensible (with Javascript!) editor, to the new kid on the block, <a href="http://www.sublimetext.com/">Sublime Text 2</a>. Sublime is a product still in beta, but I can recommend it as being definitely stable enough for every day use.</p>

<p><em>I’ll apologise up front if the following sounds too gushing or like an advertising pitch. I have no commercial interest in the product whatsoever, I actually just really like it and want others to try it out.</em></p>

<p>When starting with Sublime, the first thing you’ll notice is how amazingly fast it is. I am still amazed at how quickly it starts and continues to be, even on my little old netbook. The second thing is that you’ll see that Sublime is a text editor made by programmers for programmers. The default colour scheme is a very pleasing and eye-friendly pastels on dark grey, the interface is absolutely no-nonsense: no toolbars; no buttons for new file, save, cut, copy or paste; just one menu bar, an (albeit slightly gimmicky IMO) “minimap” of the file, and your code. All commands are available from a “command palette” which is opened via a key binding. Similarly, opening project files or searching for functions is done with another palette. These palettes, apart from being super-quick, also provide fuzzy text matching. For example, to make the selected text upper case, I just select the text, then press <code>Ctrl+Shift+P</code>, and type “chup”, which will find “CHange text to UPper case”, or if I want to open “lib/test/PolygonTest.js”, <code>Ctrl+P</code> and “l/t/p” or “PolTe” or whatever narrows it down enough with the minimum amount of typing. Everything is possible without even touching your mouse.</p>

<p><span class='pullquote-right' data-pullquote='every day you build complex data-structures capable of modelling anything by combining numbers and strings into nested arrays and maps — why couldn’t you configure a text editor in the same way?'>Probably the most surprising thing is the configuration settings. Every programmer worth his salt will fiddle and adjust settings to get the work environment Just Right, and usually this means poring through dialog after dialog of checkboxes and pull-downs. In Sublime, all the configuration (yes, ALL) is done via JSON text files. This is shocking at first, but amazingly liberating once you start to use it. As a programmer, every day you build complex data-structures capable of modelling anything by combining numbers and strings into nested arrays and maps — why couldn’t you configure a text editor in the same way? Settings are applied instantly upon save, meaning you can test out each of the settings very easily and get it just how you like it. Even key bindings are handled this way. Every interaction you have, from moving the cursor, to basic copy/paste/save actions, even to what happens when you click a mouse button is configurable. Even better though is that you can bind the same key combo to several actions and then affix conditions (referred to as “context” in the config) to that setting. For example, the “enter” key can add a new line in regular text, but you can also add another binding which makes it prepend commenting characters (<code>//</code>) if the current context is a comment. Triple-click might normally select a line, but if it’s on a function definition it could select the entire function body for you. After all this tweaking, you can commit your plain-text settings to version control for portability between your workstations, which is very handy!</span></p>

<p>One other feature I’ve not seen in any other editor is multiple selections. Komodo and other editors (VI, Emacs…) have “block editing” where you can make rectangular selections and edits across rows and columns. This is particularly useful for modifying blocks of repetitive code which happen to align vertically. Sublime takes that a step further by allowing for multiple selections. It is surprisingly useful for reformatting code, and as a replacement for Find-and-Replace. Just select (let’s say) the variable you want to rename, and hit <code>Ctrl+D</code>. The next occurrence of that word will get selected. Repeat as often as you like, the just start typing and you’ll be typing in multiple discrete locations. This feature alone has reduced the amount of macros and regexes I use to clean up text drastically. You’ll wonder how you lived without it, seriously.</p>

<p>The last thing I want to mention is the fledgling, but fast-growing developer community around Sublime. As a tool for programmers, its been designed to be extended with plugins, written in Python. What’s even better is that there’s a package repository plugin called <a href="https://github.com/wbond/sublime_package_control">Package Control</a>, written by <a href="https://github.com/wbond">Will Bond</a>, that completely streamlines the plugin installation and upgrade process integrated directly into the editor. Plugins are hosted on Github or Bitbucket and you can pull the upgrades as their published. After installing that package (which you can do just by pasting a command into the integrated python shell..!), all the available packages are shown in a command palette, and are installed without even requiring a restart. Since the code for the plugins is on Github, it’s really easy to fork it and send in pull requests if you find a bug, too. I highly recommend it!</p>

<p>And there’s just enough time for a quick little shout-out for one of my own plugins. If you’re writing Javascript or PHP with Sublime, you should totally install the <a href="http://github.com/spadgos/sublime-jsdocs">JSDocs plugin</a>. You can install it with the aforementioned Package Control plugin, or there’s instructions on the Github page. This plugin makes writing Javadoc-style comments a breeze by adding context-sensitive autocompletes, comment-aware linebreaking, and it even inspects your code to prefill <code>@param</code> and <code>@return</code> tags in a docblock. The readme file has much more information and many examples. If you run into any problems, leave me a note in the issue tracker and I’ll get right onto it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting arguments into an array]]></title>
    <link href="http://spadgos.github.com/blog/2011/09/22/converting-arguments-into-an-array/"/>
    <updated>2011-09-22T23:46:00+02:00</updated>
    <id>http://spadgos.github.com/blog/2011/09/22/converting-arguments-into-an-array</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working on the previously-mentioned <a href="http://www.github.com/spadgos/myrtle">Myrtle</a> project, as well as its unit-testing sister project, <a href="http://www.github.com/spadgos/tyrtle">Tyrtle</a> (which will get further plugs soon&#8230;), and I kind of stumbled across this interesting little thing.</p>

<p>In javascript, there&#8217;s a &#8220;magic&#8221; variable made available inside every function, called <code>arguments</code>. It appears to be an array at first glance, but it isn&#8217;t. Observe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">];</span> <span class="c1">// a real array, for comparison</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typeof</span> <span class="nx">arguments</span><span class="p">;</span> <span class="c1">// &quot;object&quot;</span>
</span><span class='line'>    <span class="k">typeof</span> <span class="nx">arr</span><span class="p">;</span>       <span class="c1">// &quot;object&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class='line'>    <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>       <span class="c1">// 2</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>     <span class="c1">// &quot;x&quot;</span>
</span><span class='line'>    <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>           <span class="c1">// &quot;x&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typeof</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">join</span><span class="p">;</span>  <span class="c1">// &quot;undefined&quot; !!!</span>
</span><span class='line'>    <span class="k">typeof</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">;</span>        <span class="c1">// &quot;function&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// &quot;[object Arguments]&quot;  !!!</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// &quot;[object Array]&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">f</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is actually a special type of object called <code>Arguments</code>, and it&#8217;s documented well on the <a href="https://developer.mozilla.org/en/JavaScript/Reference/functions_and_function_scope/arguments">Mozilla Developer Network</a>. Essentially, it is just an enumerable object in that it has a <code>.length</code> property and other properties in the slots <code>0...length - 1</code>, but it doesn&#8217;t have <code>Array</code> as its prototype, and hence, it doesn&#8217;t have any of the array functions on it.</p>

<p>Obviously, in most cases where you want to actually do something useful with the arguments object, you actually want to have an array, rather than this strange object. Converting it to an array is usually done like so (as is recommended in the MDN article linked above):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">argsAsARealArray</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works. If you really wanted to be pedantic about it, you could say that it isn&#8217;t actually safe, in case some code overwrites <code>Array.prototype.slice</code>, but I digress. In any case, it&#8217;s a lot of typing and can be very confusing to both newbies.</p>

<blockquote><p>Now, in the interests of openness, I should say that I originally wrote this post to talk about this <em>amazing</em> new technique I discovered: <code>[].concat(arguments)</code>. I wrote benchmarks and everything. It was shorter and performed about 4x better on Firefox. Then I actually used it in my code and discovered that <strong>it doesn&#8217;t even work</strong>. So, there you go. I thought I&#8217;d keep the bulk of this article and instead compare some other methods which actually do work&#8230;</p></blockquote>

<p>I wrote some functions which convert their arguments to an array and then return it. The first two both use slice, but I wanted to see if there was a difference between creating an array literal or using the prototype <em>(spoiler: there isn&#8217;t)</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">arrayProtoSlice</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">arrayLiteralSlice</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">splice</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[].</span><span class="nx">splice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">push</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">unshift</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">.</span><span class="nx">unshift</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The results were interesting. I tested by calling each of the above functions with 1000 arguments.</p>

<pre><code>Operations/second; the higher the better
Browser         Slice    Splice    Push    Unshift
Firefox 6.0.2    4044     3549    10068      9846
Chrome 13       37814     2701    38180     40952
</code></pre>

<p>Yes, some of these numbers are bizarre, but they&#8217;re not typos. Push/unshift is 250% faster than slice on Firefox, and only about 10% faster on Chrome. Yes, splice is 94% slower than any other method on Chrome &#8211; even slower than Firefox in this test. Unshift out-performs Push on Chrome by about 8%, too.</p>

<p>Of course, the real benefit of <code>[].slice.apply(arguments)</code> is that it&#8217;s a one-liner. In real life usage, at best, the push/unshift technique requires 2 lines, but could be extracted to an external function. Of course, adding another function call is not free, so I did another benchmark.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">convertWithPush</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">pushWithFnCall</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">convertWithPush</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// and the same for unshift</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Chrome, the extra function call led to a ~33% slow down. It did not seem to affect Firefox&#8217;s performance at all, however.</p>

<p>In summary:</p>

<ul>
<li>If you want a simple one liner, go with: <code>var args = [].slice.apply(arguments)</code></li>
<li>If you want better performance, use: <code>var args = []; args.push.apply(args, arguments)</code></li>
<li>Never use splice</li>
</ul>


<p>Please do <a href="http://jsperf.com/converting-arguments-to-an-array">run the tests</a> yourself (and <a href="http://jsperf.com/converting-arguments-to-an-array/2">here for version 2</a> which has the additional benchmarks). Let me know if I&#8217;ve forgotten a different method, or if I&#8217;ve stuffed up my tests somehow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Myrtle: A Javascript Mocking Framework]]></title>
    <link href="http://spadgos.github.com/blog/2011/08/11/introducing-myrtle-a-javascript-mocking-framework/"/>
    <updated>2011-08-11T23:46:00+02:00</updated>
    <id>http://spadgos.github.com/blog/2011/08/11/introducing-myrtle-a-javascript-mocking-framework</id>
    <content type="html"><![CDATA[<p>I&#8217;m writing to introduce a small project I&#8217;ve just put together. I call it <strong>Myrtle</strong> <em>(which I guess is some sort of play on words on the <a href="http://en.wikipedia.org/wiki/Mock_Turtle">Mock Turtle</a>)</em>, but in any case, it is a Javascript Mocking Framework!</p>

<p>The project code is available on <a href="https://github.com/spadgos/myrtle">Github</a>, or you can just grab <a href="https://raw.github.com/spadgos/myrtle/master/Myrtle.js">Myrtle.js</a> if you like.</p>

<p>So anyway, let&#8217;s look at what it does. Let&#8217;s say you&#8217;re writing some tests for your code, and you want to check that a particular function is called. For example, you might have a Validator class which should be called when a form input is changed. Here&#8217;s the signature of a basic validation class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @param {DOMElement} a HTML Input element</span>
</span><span class='line'><span class="cm">     * @param {String} a value to validate</span>
</span><span class='line'><span class="cm">     * @return {Boolean} If the value was valid.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nx">validate</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">inputValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// code here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first step is to spy on the validate method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">Validator</span><span class="p">,</span> <span class="s1">&#39;validate&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spying on a method modifies it so that metadata about that method is stored with each call to it, without changing the actual functionality. You can access this metadata through the API object returned by <code>Myrtle.spy</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">Validator</span><span class="p">,</span> <span class="s1">&#39;validate&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">myInputElement</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;a changed value&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let&#39;s check that validate was called</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">callCount</span><span class="p">();</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and let&#39;s see what it returned</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">lastReturn</span><span class="p">();</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and let&#39;s check what the parameters passed to it were</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">lastArgs</span><span class="p">();</span> <span class="c1">// [myInputElement, &quot;a changed value&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s important to remember here is that the validate method is still executed as if nothing ever happened. Myrtle wouldn&#8217;t be a good spy otherwise&#8230;</p>

<p>Other times you want to actually stop functions from running. For example, in a test environment, you might want to suppress error messages which you&#8217;re triggering on purpose, or to stop AJAX functions from executing. In these cases, you can stub out a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Myrtle</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">Notifications</span><span class="p">,</span> <span class="s1">&#39;displayError&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This replaces the <code>displayError</code> method with a function which does nothing. Care should be taken in these cases that other code isn&#8217;t expecting a return value from functions which you stub out completely.</p>

<p>You can also replace a function using stub. This is useful if you want to simulate a method, but not actually execute it - for example, when an AJAX method is called, you can put together a fake response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Myrtle</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">Network</span><span class="p">,</span> <span class="s1">&#39;send&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">origFn</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">({</span><span class="nx">isSuccess</span> <span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll see there that the first parameter passed to the stub function is the original method. This is useful in cases where you may want to only stub it out based on some criteria, or to modify arguments or return values of the original method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Myrtle</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">Notifications</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;displayError&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">origFn</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">message</span> <span class="o">!==</span> <span class="s1">&#39;My expected error&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">origFn</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last feature currently in Myrtle is some basic speed profiling. If you want to find out how fast your function is executed, or if it runs slower given some input, you can turn on profiling and find out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">.</span><span class="nx">profile</span><span class="p">(</span><span class="nx">calc</span><span class="p">,</span> <span class="s1">&#39;factorial&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">calc</span><span class="p">.</span><span class="nx">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">calc</span><span class="p">.</span><span class="nx">factorial</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="nx">calc</span><span class="p">.</span><span class="nx">factorial</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">getAverageTime</span><span class="p">();</span> <span class="c1">// a number, like 12 (ms)</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">getQuickest</span><span class="p">();</span> <span class="c1">// { args : [3], ret : 6, time: 1 }</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">getSlowest</span><span class="p">();</span> <span class="c1">// { args: [12], ret: 479001600, time: 20 }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are the three main features of Myrtle (so far). However, the nice thing about them is that they can all be combined in any way. You can spy on and stub out a method, or spy and profile. Stubbing and profiling probably isn&#8217;t so useful though, since you&#8217;d only be measuring the speed of performing your replacement method.</p>

<p>There are a few ways to combine the options, and it&#8217;s important to know that each of the Myrtle functions returns the <em>exact same</em> API object per function. To demonstrate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">info1</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">Obj</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>  <span class="c1">// turn on spying</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">info2</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">Obj</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span> <span class="c1">// turn on stubbing</span>
</span><span class='line'><span class="nx">info1</span> <span class="o">===</span> <span class="nx">info2</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s also the <code>Myrtle</code> function itself which can be used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Myrtle</span><span class="p">(</span><span class="nx">Obj</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">spy</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">stub</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// my replacement</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">profile</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, the last thing to cover is an important one: tidying up. Chances are that you don&#8217;t want to stub out your methods for all the tests, and you want to restore them to how they were before at some point. Myrtle makes this super easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// if you have a reference to the API object:</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">release</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and even if you don&#39;t, remember that</span>
</span><span class='line'><span class="c1">// Myrtle will give you it easily.</span>
</span><span class='line'><span class="nx">Myrtle</span><span class="p">(</span><span class="nx">Obj</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">).</span><span class="nx">release</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and if you&#39;re really lazy, just clean them all up!</span>
</span><span class='line'><span class="nx">Myrtle</span><span class="p">.</span><span class="nx">releaseAll</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// if you&#39;re not sure if you&#39;ve left</span>
</span><span class='line'><span class="c1">// some hanging about, just check!</span>
</span><span class='line'><span class="nx">Myrtle</span><span class="p">.</span><span class="nx">size</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, like I said, the code is on <a href="https://github.com/spadgos/myrtle">Github</a>. Go have look and let me know what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix timestamp confusion]]></title>
    <link href="http://spadgos.github.com/blog/2009/09/24/unix-timestamp-confusion/"/>
    <updated>2009-09-24T23:46:00+02:00</updated>
    <id>http://spadgos.github.com/blog/2009/09/24/unix-timestamp-confusion</id>
    <content type="html"><![CDATA[<p>There seems to be quite some confusion when it comes to working with dates and Unix timestamps, especially when there are multiple timezones involved. I thought I would write up a bit of an explanation to help clarify the situation, and show some of the better ways to deal with this in PHP.</p>

<p>First up, some background information:</p>

<p>A Unix timestamp (or POSIX timestamp) is a measure of time, counted as a single number, representing the number of seconds since Unix Epoch, which was Midnight, 1st January 1970 UTC - continuously counting upwards from then, <em>kind of</em>. <a href="http://en.wikipedia.org/wiki/Leap_second">Leap seconds</a> are dealt with by <a href="http://en.wikipedia.org/wiki/Unix_timestamp#Encoding_time_as_a_number">repeating a value</a>, but for our purposes you can imagine it as a linear measure of time.</p>

<blockquote><p><strong>The important thing is that no matter what the clock on the wall says, no matter where you are in the world, the Unix timestamp is the same.</strong></p></blockquote>

<p>PHP uses this Unix time for all its date handling, and you can find similar constructs in many other programming languages. Here are some common PHP functions for getting and displaying the time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">time();                   // gets the current Unix timestamp</span>
</span><span class='line'><span class="x">date($format[, $time]);   // display the given time using</span>
</span><span class='line'><span class="x">                          // $format and the server&#39;s timezone</span>
</span><span class='line'><span class="x">                          // information</span>
</span><span class='line'><span class="x">gmdate($format[, $time]); // display the given time using</span>
</span><span class='line'><span class="x">                          // $format, assuming GMT timezone.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many benefits of encoding a date like this, but the top two would have to be for storage (a single 32-bit integer can handle all dates from December 1901 until January 2038), and for arithmetic purposes. However, the easiness by which you can mutate and play with a date is what often leads newcomers astray.</p>

<p>Here&#8217;s an example of a good use of date arithmetic: Let&#8217;s say you want to know what time it will be 47 minutes in the future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$now = time();</span>
</span><span class='line'><span class="x">$future = $now + 47 * 60; // 47 minutes = 47 * 60 seconds</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo date(&#39;H:i:s&#39;, $now);       // 14:35:55</span>
</span><span class='line'><span class="x">echo date(&#39;H:i:s&#39;, $future);    // 15:23:55</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy!</p>

<p>Now here&#8217;s the trap. I live in Brisbane (GMT+10) (and let&#8217;s say my server is there too), but I want to display the local time for a user who is in Paris (GMT+1). The naive approach is to simply look at the difference between the server&#8217;s timezone and the user&#8217;s timezone and adjust the timestamp accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$serverTimezone = 10;</span>
</span><span class='line'><span class="x">$userTimezone = 1;</span>
</span><span class='line'>
</span><span class='line'><span class="x">$hoursDifference = $serverTimezone - $userTimezone;</span>
</span><span class='line'>
</span><span class='line'><span class="x">$serverTime = time();</span>
</span><span class='line'><span class="x">$userTime = $serverTime - $hoursDifference * 60 * 60;</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo &quot;Brisbane: &quot; . date(&quot;H:i:s&quot;, $serverTime); // 14:35:55</span>
</span><span class='line'><span class="x">echo &quot;Paris: &quot;    . date(&quot;H:i:s&quot;, $userTime)    // 05:35:55</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect! Easy right? <strong>No!</strong> Remember the one important thing about Unix timestamps: <strong>no matter where you are in the world, no matter what hour of the day it is, it is still the same time and hence, the Unix timestamp is the same!</strong> Paris isn&#8217;t living 9 hours in the past, it&#8217;s just that their clocks are set nine hours behind mine.</p>

<p>But, who cares? It works right? Yep&#8230; except when it doesn&#8217;t.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$serverTime = mktime(10, 59, 30, 3, 29, 2009);</span>
</span><span class='line'><span class="x">$userTime = $serverTime - $hoursDifference * 60 * 60;</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo &quot;Brisbane: &quot; . date(&quot;H:i:s&quot;, $serverTime); // 10:59:30</span>
</span><span class='line'><span class="x">echo &quot;Paris: &quot;    . date(&quot;H:i:s&quot;, $userTime)    // 01:59:30</span>
</span><span class='line'>
</span><span class='line'><span class="x">// one minute later</span>
</span><span class='line'><span class="x">$serverTime = mktime(11, 0, 30, 3, 29, 2009);</span>
</span><span class='line'><span class="x">$userTime = $serverTime - $hoursDifference * 60 * 60;</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo &quot;Brisbane: &quot; . date(&quot;H:i:s&quot;, $serverTime); // 11:00:30</span>
</span><span class='line'><span class="x">echo &quot;Paris: &quot;    . date(&quot;H:i:s&quot;, $userTime)    // 02:00:30</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, it looks good, but it is forgetting one thing. In between these two times (one minute apart), all diligent and insomniac Parisians set their clocks forward an hour because of daylight savings. The time your user would want to see is actually 3:00:30, which is exactly one minute after 1:59:30 on that day.</p>

<p><strong>The better approach:</strong></p>

<p>When using the <code>date()</code> function, PHP formats the time according to its default timezone settings. The easiest way to find the current clock-time at any given location is to change the timezone settings. This means that all the naive conversions you were doing before are now unnecessary, and it will be robust to any peculiarities such as daylight savings. In the future, should France decide to move to a different timezone, your code won&#8217;t need any changing either! (Though, the server might need to update its OS/PHP version or something).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">// this would be set by default in your php.ini file</span>
</span><span class='line'><span class="x">date_default_timezone_set(&#39;Australia/Brisbane&#39;);</span>
</span><span class='line'><span class="x">$time = mktime(10, 59, 30, 3, 29, 2009);</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo date(&quot;H:i:s&quot;, $time); // 10:59:30</span>
</span><span class='line'>
</span><span class='line'><span class="x">date_default_timezone_set(&#39;Europe/Paris&#39;);</span>
</span><span class='line'>
</span><span class='line'><span class="x">echo date(&quot;H:i:s&quot;, $time);      // 01:59:30</span>
</span><span class='line'><span class="x">echo date(&quot;H:i:s&quot;, $time + 60); // 03:00:30</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that time is constant in the universe across earth, and that a Unix timestamp is a good-enough measure of that time, and that it has nothing to do with what your clock tells you. Changing your clock because of where you are on Earth doesn&#8217;t affect the passage of time, and therefore altering time to get the desired clock-time is the wrong way to do things. The only time you should be using arithmetic on a timestamp is when you are actually interested in a different point in time.</p>

<p>Follow this basic guideline and you&#8217;ll avoid a lot of headaches when dealing with different timezones.</p>
]]></content>
  </entry>
  
</feed>
